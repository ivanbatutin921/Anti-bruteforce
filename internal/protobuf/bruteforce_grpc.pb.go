// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: bruteforce.proto

package bruteforce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BruteforceService_Authorization_FullMethodName     = "/bruteforce.BruteforceService/Authorization"
	BruteforceService_ResetBucket_FullMethodName       = "/bruteforce.BruteforceService/ResetBucket"
	BruteforceService_AddToBlacklist_FullMethodName    = "/bruteforce.BruteforceService/AddToBlacklist"
	BruteforceService_DeleteToBlacklist_FullMethodName = "/bruteforce.BruteforceService/DeleteToBlacklist"
	BruteforceService_AddToWhitelist_FullMethodName    = "/bruteforce.BruteforceService/AddToWhitelist"
	BruteforceService_DeleteToWhitelist_FullMethodName = "/bruteforce.BruteforceService/DeleteToWhitelist"
)

// BruteforceServiceClient is the client API for BruteforceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BruteforceServiceClient interface {
	Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error)
	ResetBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*Response, error)
	AddToBlacklist(ctx context.Context, in *BlackList, opts ...grpc.CallOption) (*BlackList, error)
	DeleteToBlacklist(ctx context.Context, in *BlackList, opts ...grpc.CallOption) (*BlackList, error)
	AddToWhitelist(ctx context.Context, in *WhiteList, opts ...grpc.CallOption) (*WhiteList, error)
	DeleteToWhitelist(ctx context.Context, in *WhiteList, opts ...grpc.CallOption) (*WhiteList, error)
}

type bruteforceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBruteforceServiceClient(cc grpc.ClientConnInterface) BruteforceServiceClient {
	return &bruteforceServiceClient{cc}
}

func (c *bruteforceServiceClient) Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, BruteforceService_Authorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteforceServiceClient) ResetBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, BruteforceService_ResetBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteforceServiceClient) AddToBlacklist(ctx context.Context, in *BlackList, opts ...grpc.CallOption) (*BlackList, error) {
	out := new(BlackList)
	err := c.cc.Invoke(ctx, BruteforceService_AddToBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteforceServiceClient) DeleteToBlacklist(ctx context.Context, in *BlackList, opts ...grpc.CallOption) (*BlackList, error) {
	out := new(BlackList)
	err := c.cc.Invoke(ctx, BruteforceService_DeleteToBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteforceServiceClient) AddToWhitelist(ctx context.Context, in *WhiteList, opts ...grpc.CallOption) (*WhiteList, error) {
	out := new(WhiteList)
	err := c.cc.Invoke(ctx, BruteforceService_AddToWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteforceServiceClient) DeleteToWhitelist(ctx context.Context, in *WhiteList, opts ...grpc.CallOption) (*WhiteList, error) {
	out := new(WhiteList)
	err := c.cc.Invoke(ctx, BruteforceService_DeleteToWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BruteforceServiceServer is the server API for BruteforceService service.
// All implementations must embed UnimplementedBruteforceServiceServer
// for forward compatibility
type BruteforceServiceServer interface {
	Authorization(context.Context, *AuthRequest) (*Response, error)
	ResetBucket(context.Context, *BucketRequest) (*Response, error)
	AddToBlacklist(context.Context, *BlackList) (*BlackList, error)
	DeleteToBlacklist(context.Context, *BlackList) (*BlackList, error)
	AddToWhitelist(context.Context, *WhiteList) (*WhiteList, error)
	DeleteToWhitelist(context.Context, *WhiteList) (*WhiteList, error)
	mustEmbedUnimplementedBruteforceServiceServer()
}

// UnimplementedBruteforceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBruteforceServiceServer struct {
}

func (UnimplementedBruteforceServiceServer) Authorization(context.Context, *AuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedBruteforceServiceServer) ResetBucket(context.Context, *BucketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedBruteforceServiceServer) AddToBlacklist(context.Context, *BlackList) (*BlackList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedBruteforceServiceServer) DeleteToBlacklist(context.Context, *BlackList) (*BlackList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToBlacklist not implemented")
}
func (UnimplementedBruteforceServiceServer) AddToWhitelist(context.Context, *WhiteList) (*WhiteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedBruteforceServiceServer) DeleteToWhitelist(context.Context, *WhiteList) (*WhiteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToWhitelist not implemented")
}
func (UnimplementedBruteforceServiceServer) mustEmbedUnimplementedBruteforceServiceServer() {}

// UnsafeBruteforceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BruteforceServiceServer will
// result in compilation errors.
type UnsafeBruteforceServiceServer interface {
	mustEmbedUnimplementedBruteforceServiceServer()
}

func RegisterBruteforceServiceServer(s grpc.ServiceRegistrar, srv BruteforceServiceServer) {
	s.RegisterService(&BruteforceService_ServiceDesc, srv)
}

func _BruteforceService_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteforceServiceServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteforceService_Authorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteforceServiceServer).Authorization(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteforceService_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteforceServiceServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteforceService_ResetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteforceServiceServer).ResetBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteforceService_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteforceServiceServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteforceService_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteforceServiceServer).AddToBlacklist(ctx, req.(*BlackList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteforceService_DeleteToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteforceServiceServer).DeleteToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteforceService_DeleteToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteforceServiceServer).DeleteToBlacklist(ctx, req.(*BlackList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteforceService_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteforceServiceServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteforceService_AddToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteforceServiceServer).AddToWhitelist(ctx, req.(*WhiteList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteforceService_DeleteToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteforceServiceServer).DeleteToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteforceService_DeleteToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteforceServiceServer).DeleteToWhitelist(ctx, req.(*WhiteList))
	}
	return interceptor(ctx, in, info, handler)
}

// BruteforceService_ServiceDesc is the grpc.ServiceDesc for BruteforceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BruteforceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bruteforce.BruteforceService",
	HandlerType: (*BruteforceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorization",
			Handler:    _BruteforceService_Authorization_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _BruteforceService_ResetBucket_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _BruteforceService_AddToBlacklist_Handler,
		},
		{
			MethodName: "DeleteToBlacklist",
			Handler:    _BruteforceService_DeleteToBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _BruteforceService_AddToWhitelist_Handler,
		},
		{
			MethodName: "DeleteToWhitelist",
			Handler:    _BruteforceService_DeleteToWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bruteforce.proto",
}
